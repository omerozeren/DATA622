bag_df_label
bag_nb_model <- naiveBayes(bag_df_label ~ ., data = bag_df)
bag_nb_model
training_bag_nb_yhat <- predict(bag_nb_model, bag_df,type = 'raw)
)
)))
\
training_bag_nb_yhat <- predict(bag_nb_model, bag_df_without_label,type='raw')
training_bag_nb_yhat <- predict(bag_nb_model, bag_df,type='raw')
training_bag_nb_yhat
bag_capacity_to_learn <- estimate_model_performance(bag_df_label, training_bag_nb_yhat, paste("NB Bag", i))
bag_df_label
training_bag_nb_yhat
bag_df_label
training_bag_nb_yhat
bag_capacity_to_learn <- estimate_model_performance(bag_df_label, training_bag_nb_yhat, paste("NB Bag", 2))
bag_df_label
bag_df
bag_nb_model <- naiveBayes(bag_df_label ~ ., data = bag_df)
bag_nb_model
b_testclass<-unlist(apply(round(training_bag_nb_yhat),1,which.max))-1
b_testclass
the_bags <- list()
for (i in 1:200){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, sample,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(sample$label, y_pred_class, paste("NB Bag", i))
}
apply_bootstrap_data <- function(data, proportion = 0.7, sample_with_replacement = TRUE){
observation <- round(nrow(data) * proportion, 0)
return(data[sample(nrow(data), observation, replace = sample_with_replacement),])
}
the_bags <- list()
for (i in 1:200){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, sample,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(sample$label, y_pred_class, paste("NB Bag", i))
}
performance
the_bags <- list()
for (i in 1:200){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, sample,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(sample$label, y_pred_class, paste("NB Bag", i))
}
performance
the_bags <- list()
for (i in 1:200){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, sample,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(sample$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_learn")){
nb_bag_capacity_to_learn <- rbind(nb_bag_capacity_to_learn, performance)
} else {
nb_bag_capacity_to_learn <- performance
}
}
nb_bag_capacity_to_learn
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, sample,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(sample$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_learn")){
nb_bag_capacity_to_learn <- rbind(nb_bag_capacity_to_learn, performance)
} else {
nb_bag_capacity_to_learn <- performance
}
}
nb_bag_capacity_to_learn
the_bags
the_bags <- list()
for (i in 1:50){
sample_train <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(sample$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_learn")){
nb_bag_capacity_to_learn <- rbind(nb_bag_capacity_to_learn, performance)
} else {
nb_bag_capacity_to_learn <- performance
}
}
sample <- apply_bootstrap_data(df_train)
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
y_pred_class
length((y_pred_class))
length(sample$label)
length(df_test$label)
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_learn")){
nb_bag_capacity_to_learn <- rbind(nb_bag_capacity_to_learn, performance)
} else {
nb_bag_capacity_to_learn <- performance
}
}
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
y_pred_class
estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_learn")){
estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_learn")){
nb_bag_capacity_to_learn <- rbind(nb_bag_capacity_to_learn, performance)
} else {
nb_bag_capacity_to_learn <- performance
}
}
nb_bag_capacity_to_learn
performance
the_bags <- list()
performance <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance[[i]] <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
}
nb_bag_capacity_to_learn
nb_bag_capacity_to_learn$ACCURACY
nb_bag_capacity_to_learn$ACCURACY
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
nb_bag_capacity_to_learn <- rbind(performance$ACCURACY, performance)
}
rbind(performance$ACCURACY)
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
nb_bag_capacity_to_learn <- rbind(performance$ACCURACY)
}
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
}
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
}
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
rst<-rbind(performance, performance)
}
rst
the_bags <- list()
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
rst<-rbind(performance, performance)
}
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
rst<-rbind(performance, performance)
}
the_bags <- list()
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
rst<-rbind(performance, performance)
}
the_bags <- list()
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
rst<-rbind(performance, performance)
}
rst
rst
the_bags <- list()
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_generalize")){
nb_bag_capacity_to_generalize <- rbind(nb_bag_capacity_to_generalize, performance)
} else {
nb_bag_capacity_to_generalize <- performance
}
}
the_bags <- list()
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_generalize")){
nb_bag_capacity_to_generalize <- rbind(nb_bag_capacity_to_generalize, performance)
} else {
nb_bag_capacity_to_generalize <- performance
}
}
nb_bag_capacity_to_generalize
View(nb_bag_capacity_to_generalize)
View(nb_bag_capacity_to_generalize)
library(class)
library(pROC)
library(ROCR)
library(caret)
library(e1071)
library(naivebayes)
library(MASS)
library(mltools)
library(knitr)
library(dplyr)
library(tidyr)
df <- read.table("~/Documents/GitHub/DATA622/data.txt",header = T,sep=',')
df$label <- ifelse(df$label =="BLACK",1,0)
df$y <- as.numeric(df$y)
df$X <- as.factor(df$X)
set.seed(42)
split_df <- createDataPartition(df$label, p = .70, list = FALSE)
df_train <- df[split_df,]
df_test <- df[-split_df,]
estimate_model_performance <- function(y_true, y_pred, model_name){
cm <- confusionMatrix(table(y_true, y_pred))
cm_table <- cm$table
tpr <- cm_table[[1]] / (cm_table[[1]] + cm_table[[4]])
fnr <- 1 - tpr
fpr <- cm_table[[3]] / (cm_table[[3]] + cm_table[[4]])
tnr <- 1 - fpr
accuracy <- cm$overall[[1]]
for_auc <- prediction(c(y_pred), y_true)
auc <- performance(for_auc, "auc")
auc <- auc@y.values[[1]]
return(data.frame(Algo = model_name, AUC = auc, ACCURACY = accuracy, TPR = tpr, FPR = fpr, TNR = tnr, FNR = fnr))
}
apply_bootstrap_data <- function(data, proportion = 0.7, sample_with_replacement = TRUE){
observation <- round(nrow(data) * proportion, 0)
return(data[sample(nrow(data), observation, replace = sample_with_replacement),])
}
the_bags <- list()
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("nb_bag_capacity_to_generalize")){
nb_bag_capacity_to_generalize <- rbind(nb_bag_capacity_to_generalize, performance)
} else {
nb_bag_capacity_to_generalize <- performance
}
}
View(nb_bag_capacity_to_generalize)
the_bags <- list()
for (i in 1:100){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- predict(nb_model, df_test,type='raw')
y_pred_class<-unlist(apply(round(y_pred),1,which.max))-1
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("performance_table")){
performance_table <- rbind(performance_table, performance)
} else {
performance_table <- performance
}
}
View(performance_table)
logit_model <- glm(df_train$label ~ ., data = df_train, family = "binomial")
logit_model <- glm(df_train$label ~ ., data = df_train, family = "binomial")
logit_test_y_pred<-predict(logit_model,df_test,type='raw')
logit_model <- glm(df_train$label ~ ., data = df_train, family = "binomial")
logit_test_y_pred<-predict(logit_model,df_test,type = "response")
logit_model <- glm(df_train$label ~ ., data = df_train, family = "binomial")
logit_test_y_pred<-predict(logit_model,df_test,type = "response")
logit_testclass<-unlist(apply(round(logit_test_y_pred),1,which.max))-1
length(logit_test_y_pred)
length(df_test$label)
logit_testclass<-unlist(apply(round(logit_test_y_pred),1,which.max))
logit_test_y_pred
logit_testclass<-unlist(apply(round(logit_test_y_pred),1,which.max))-1
logit_model <- glm(df_train$label ~ ., data = df_train, family = "binomial")
logit_test_y_pred<-predict(logit_model,df_test,type = "response")
logit_test_y_pred
round(logit_test_y_pred)
unlist(apply(round(logit_test_y_pred),1,which.max))
unlist(apply(round(logit_test_y_pred))
)
unlist(apply(round(logit_test_y_pred),1,0))
unlist(apply(round(logit_test_y_pred),1,which.max))
logit_test_y_pred
logit_model <- knn(df_train,df_train, cl = df_train$label, k = 5)
logit_model <- knn(df_train, cl = df_train$label, k = 5)
df_train
df_train[1:2]
logit_model <- knn(df_train[1:2],df_train[1:2], cl = df_train$label, k = 5)
logit_model
knn_y_true<- knn(df_train[1:2],df_test[1:2], cl = df_train$label, k = 5)
knn_y_true
length((knn_y_true))
length(df_test)
length(df_test[1:2])
length(df_test$label[1:2])
df_test
length(df_test$label)
length((knn_y_true))
logit_testclass<-unlist(apply(round(knn_y_true),1,which.max))-1
logit_testclass<-knn_y_true
logit_table<-table(df_test$label, logit_testclass)
logit_table
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- knn(sample[1:2],df_test[1:2], cl = sample$label, k = 5)
}
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- knn(sample[1:2],df_test[1:2], cl = sample$label, k = 5)
y_pred_class<-y_pred
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("performance_table")){
performance_table <- rbind(performance_table, performance)
} else {
performance_table <- performance
}
performance_table
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- knn(sample[1:2],df_test[1:2], cl = sample$label, k = 5)
y_pred_class<-y_pred
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("NB Bag", i))
if(exists("performance_table")){
performance_table <- rbind(performance_table, performance)
} else {
performance_table <- performance
}
}
performance_table
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- knn(sample[1:2],df_test[1:2], cl = sample$label, k = 5)
y_pred_class<-y_pred
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("KNN Bag", i))
if(exists("performance_table")){
performance_table <- rbind(performance_table, performance)
} else {
performance_table <- performance
}
}
performance_table
the_bags <- list()
for (i in 1:50){
sample <- apply_bootstrap_data(df_train)
the_bags[[i]] <- sample
# Train the Naive Bayes Model
nb_model <- naiveBayes(sample$label ~ ., data = sample)
y_pred <- knn(sample[1:2],df_test[1:2], cl = sample$label, k = 5)
y_pred_class<-y_pred
## Evaluate the capacity to learn
performance <- estimate_model_performance(df_test$label, y_pred_class, paste("KNN Bag", i))
if(exists("performance_table_knn")){
performance_table_knn <- rbind(performance_table_knn, performance)
} else {
performance_table_knn <- performance
}
}
performance_table_knn
